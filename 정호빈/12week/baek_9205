import java.util.*;
import java.io.*;


public class Main {
	static int N,flag=0 ;
	static int[][] arr;
	static boolean[] v;
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st;
		int T = Integer.parseInt(br.readLine());
		for(int t=0;t<T;t++) {
			N= Integer.parseInt(br.readLine());
			arr = new int[N+2][2];
			v = new boolean[N+2];
			for(int i=0;i<N+2;i++) {
				st = new StringTokenizer(br.readLine());
				arr[i][0] = Integer.parseInt(st.nextToken());
				arr[i][1] = Integer.parseInt(st.nextToken());
			}
			flag=0;
			bfs(arr[0][0],arr[0][1]);
			if(flag==1) {
				System.out.println("happy");
			}else {
				System.out.println("sad");
			}
			
		}
		
	}

	private static void bfs(int x, int y) {
		Queue<int[]> que = new LinkedList<>();
		que.add(new int[] {x,y});
		v[0] =true;
		while(!que.isEmpty()) {
			int[] a = que.poll();
			if(arr[N+1][0]==a[0]&&arr[N+1][1]==a[1]) {
				flag=1;
				return;
			}
			for(int i=0;i<arr.length;i++) {
				if(!v[i]&&Math.abs(arr[i][0]-a[0])+Math.abs(arr[i][1]-a[1])<=1000) {
					que.add(new int[] {arr[i][0],arr[i][1]});
					v[i] = true;
				}
			}
		}
	}

	

	
}
