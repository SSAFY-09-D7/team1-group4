import java.util.*;
import java.io.*;


public class Main {
	
	static int[][] arr;
	static boolean[][] v;
	static int[][]d;
	static int[] dx= {0,1,0,-1};
	static int[] dy = {1,0,-1,0};
	static int N;
	
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st;
		N = Integer.parseInt(br.readLine());
		arr = new int[N][N];
		v = new boolean[N][N];
		d = new int[N][N];
		for(int i=0;i<N;i++) {
			Arrays.fill(d[i], -1);
		}
		for(int i=0;i<N;i++) {
			st = new StringTokenizer(br.readLine());
			for(int j=0;j<N;j++) {
				arr[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		int max=0;
		for(int i=0;i<N;i++) {
			for(int j=0;j<N;j++) {
				max=Math.max(dfs(i,j),max);
			}
		}
		System.out.println(max);
		
	}

	private static int dfs(int x, int y) {
		int cnt=0,max=0;
		if(d[x][y]!=-1) {
			return d[x][y];
		}
		v[x][y] =true;
		for(int i=0;i<4;i++) {
			int nx = x+dx[i];
			int ny = y+dy[i];
			if(nx>=0&&nx<N&&ny>=0&&ny<N&&!v[nx][ny]&&arr[nx][ny]>arr[x][y]) {
				max = Math.max(dfs(nx,ny)+1,max);
				cnt++;
			}
		}
		if(cnt==0) {
			v[x][y]=false;
			d[x][y] = 1;
			return 1;
		}
		v[x][y]=false;
		d[x][y] = max;
		return d[x][y];
	}
	



	

	
}
